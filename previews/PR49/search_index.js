var documenterSearchIndex = {"docs":
[{"location":"HolisticElectricityModel/#API_ref","page":"API","title":"HolisticElectricityModel API Reference","text":"","category":"section"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.AbstractAgent","page":"API","title":"HolisticElectricityModel.AbstractAgent","text":"Abstract type for agents.\n\nRequired interfaces:\n\nget_id(agent::Agent)::String\ngetcurrentyear(agent::Agent, model_data::HEMData)::Tuple{Float64,Symbol}\nsolveagentproblem!(     agents::AgentGroup,     agentopts::AgentOptions,     modeldata::HEMData,     hemopts::HEMOptions,     agentstore::AgentStore, )\nsaveresults(   agent::AbstractAgent,   agentopts::AgentOptions,   hemopts::HEMOptions,   exportfilepath::AbstractString,   fileprefix::AbstractString,\n\n)\n\n\n\n\n\n","category":"type"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.Agent","page":"API","title":"HolisticElectricityModel.Agent","text":"Abstract type for all individual agents.\n\n\n\n\n\n","category":"type"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.AgentGroup","page":"API","title":"HolisticElectricityModel.AgentGroup","text":"Abstract type for a group of individual agents.\n\n\n\n\n\n","category":"type"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.DERAggregatorOptions-Tuple{MathOptInterface.OptimizerWithAttributes}","page":"API","title":"HolisticElectricityModel.DERAggregatorOptions","text":"DERAggregatorOptions(\n    attributes::MathOptInterface.OptimizerWithAttributes;\n    incentive_curve,\n    frac_viu_cost_savings_as_revenue\n) -> DERAggregatorOptions\n\n\nConstruct DERAggregatorOptions with an MOI.OptimizerWithAttributes instance.\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.Dimension","page":"API","title":"HolisticElectricityModel.Dimension","text":"Behaves like a Vector of Symbols with additional metadata fields.\n\n\n\n\n\n","category":"type"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.GreenDeveloperOptions-Tuple{MathOptInterface.OptimizerWithAttributes}","page":"API","title":"HolisticElectricityModel.GreenDeveloperOptions","text":"GreenDeveloperOptions(\n    attributes::MathOptInterface.OptimizerWithAttributes\n) -> GreenDeveloperOptions\n\n\nConstruct GreenDeveloperOptions with an MOI.OptimizerWithAttributes instance.\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.GurobiSolver","page":"API","title":"HolisticElectricityModel.GurobiSolver","text":"Construct an Gurobi optimizer. Use default settings or pass an MOI.OptimizerWithAttributes instance.\n\nIf using the default settings, call import_gurobi() first. Gurobi must be installed.\n\nExamples\n\njulia> import_gurobi()\njulia> hem_solver = GurobiSolver()\n\njulia> import Gurobi\njulia> import JuMP\njulia> gurobi = JuMP.optimizer_with_attributes(\n    () -> Gurobi.Optimizer(Gurobi.Env()),\n    \"MIPFocus\" => 3,\n)\njulia> solver = GurobiSolver(gurobi)\n\n\n\n\n\n","category":"type"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.IPPOptions-Tuple{HolisticElectricityModel.IPPAlgorithm, Dict}","page":"API","title":"HolisticElectricityModel.IPPOptions","text":"Construct IPPOptions with solvers defined as MOI.OptimizerWithAttributes instances or HEMSolver instances.\n\nReview the functions that call get_new_jump_model for Dict key requirements.\n\nExamples\n\njulia> ipp_opts = IPPOptions(\n    LagrangeDecomposition(),\n    Dict(\n        \"Lagrange_Sub_Investment_Retirement_Cap\" => JuMP.optimizer_with_attributes(\n            Ipopt.Optimizer,\n            \"print_level\" => 0,\n        ),\n        \"Lagrange_Sub_Dispatch_Cap\" => JuMP.optimizer_with_attributes(\n            Xpress.Optimizer,\n        ),\n        \"Lagrange_Feasible_Cap\" => JuMP.optimizer_with_attributes(\n            Xpress.Optimizer,\n        )\n    )\n)\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.IpoptSolver","page":"API","title":"HolisticElectricityModel.IpoptSolver","text":"Construct an Ipopt optimizer. Use default settings or pass an MOI.OptimizerWithAttributes instance.\n\nIf using the default settings, call import_ipopt() first. Ipopt must be installed.\n\nExamples\n\njulia> import_ipopt()\njulia> hem_solver = IpoptSolver()\n\njulia> import Ipopt\njulia> import JuMP\njulia> ipopt = JuMP.optimizer_with_attributes(Ipopt.Optimizer, \"tol\" => 1e-6, \"print_level\" => 0)\njulia> solver = IpoptSolver(ipopt)\n\n\n\n\n\n","category":"type"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.PVAdoptionModel-NTuple{4, Any}","page":"API","title":"HolisticElectricityModel.PVAdoptionModel","text":"PVAdoptionModel(\n    Shape,\n    MeanPayback,\n    Bass_p,\n    Bass_q\n) -> HolisticElectricityModel.PVAdoptionModel\n\n\nConstructs a PVAdoptionModel by computing Rate from the other parameters.\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.ParamScalar","page":"API","title":"HolisticElectricityModel.ParamScalar","text":"Behaves like a number with additional metadata fields.\n\n\n\n\n\n","category":"type"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.UtilityOptions-Tuple{MathOptInterface.OptimizerWithAttributes}","page":"API","title":"HolisticElectricityModel.UtilityOptions","text":"UtilityOptions(\n    attributes::MathOptInterface.OptimizerWithAttributes\n) -> UtilityOptions\n\n\nConstruct UtilityOptions with an MOI.OptimizerWithAttributes instance.\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.XpressSolver","page":"API","title":"HolisticElectricityModel.XpressSolver","text":"Construct an Xpress optimizer. Use default settings or pass an MOI.OptimizerWithAttributes instance.\n\nIf using the default settings, call import_xpress() first. Xpress must be installed.\n\nExamples\n\njulia> import_xpress()\njulia> hem_solver = XpressSolver()\n\njulia> import Xpress\njulia> import JuMP\njulia> xpress = JuMP.optimizer_with_attributes(\n    Xpress.Optimizer,\n    \"MIPRELSTOP\" => 0.01,\n    \"OUTPUTLOG\" => 1,\n)\njulia> solver = XpressSolver(xpress)\n\n\n\n\n\n","category":"type"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.configure_logging-Tuple{}","page":"API","title":"HolisticElectricityModel.configure_logging","text":"configure_logging(\n;\n    console_level,\n    file_level,\n    filename\n) -> InfrastructureSystems.MultiLogger\n\n\nCreates console and file loggers and sets the global_logger.\n\nNote: Log messages may not be written to the file until flush() or close() is called on the returned logger.\n\nArguments\n\nconsole_level = Logging.Error: level for console messages\nfile_level = Logging.Info: level for file messages\nfilename::Union{Nothing, AbstractString} = \"hem.log\": log file; pass nothing to disable file logging\n\nExample\n\nlogger = configure_logging(console_level = Logging.Info)\n@info \"log message\"\nclose(logger)\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.get_agent-Union{Tuple{T}, Tuple{Type{T}, AgentStore}, Tuple{Type{T}, AgentStore, Any}} where T<:AbstractAgent","page":"API","title":"HolisticElectricityModel.get_agent","text":"get_agent(\n    ::Type{T<:AbstractAgent},\n    store::AgentStore\n) -> AbstractAgent\nget_agent(\n    ::Type{T<:AbstractAgent},\n    store::AgentStore,\n    id\n) -> AbstractAgent\n\n\nReturn the agent of the given type and ID from the store.\n\nIf there is only one agent of the given type then id is optional.\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.get_current_year-Tuple{AbstractAgent, HEMData}","page":"API","title":"HolisticElectricityModel.get_current_year","text":"get_current_year(\n    agent::AbstractAgent,\n    model_data::HEMData\n) -> Tuple{Any, Any}\n\n\nGet the last year for which agent's data have been updated. Provided so other  agents can access the right data for agent.\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.initialize_param-Tuple{AbstractString, HolisticElectricityModel.Dimension}","page":"API","title":"HolisticElectricityModel.initialize_param","text":"initialize_param(\n    name::AbstractString,\n    index::HolisticElectricityModel.Dimension;\n    value,\n    prose_name,\n    description\n) -> HolisticElectricityModel.ParamArray{1}\n\n\nReturns a ParamArray with all values set to value.\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.initialize_param-Tuple{AbstractString, Vararg{Any}}","page":"API","title":"HolisticElectricityModel.initialize_param","text":"initialize_param(\n    name::AbstractString,\n    indices...;\n    value,\n    prose_name,\n    description\n) -> HolisticElectricityModel.ParamArray{1}\n\n\nReturn a ParamArray with all values set to value, and indices formed from Iterators.product(indices...).\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.ipp_cap_lower-NTuple{10, Any}","page":"API","title":"HolisticElectricityModel.ipp_cap_lower","text":"ipp_cap_lower(\n    ipp,\n    ipp_opts,\n    model_data,\n    delta_t,\n    window_length,\n    customers,\n    der_aggregator,\n    green_developer,\n    utility,\n    solver\n) -> Any\n\n\nLower level optimization results are used to set variable bounds for McCormick-envelope Relaxation\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.ipp_cap_lower_dual-NTuple{10, Any}","page":"API","title":"HolisticElectricityModel.ipp_cap_lower_dual","text":"ipp_cap_lower_dual(\n    ipp,\n    ipp_opts,\n    model_data,\n    delta_t,\n    window_length,\n    customers,\n    der_aggregator,\n    green_developer,\n    utility,\n    solver\n) -> Any\n\n\nLower level dual optimization results are used to set variable bounds for McCormick-envelope Relaxation\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.make_keyed_array-Tuple","page":"API","title":"HolisticElectricityModel.make_keyed_array","text":"make_keyed_array(indices...; fill_nan) -> Any\n\n\nReturn an uninitialized KeyedArray from any number of Dimension values.\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.read_keyed_array-Tuple{AbstractString, Int64}","page":"API","title":"HolisticElectricityModel.read_keyed_array","text":"read_keyed_array(\n    filename::AbstractString,\n    num_dims::Int64\n) -> Any\n\n\nReturn a KeyedArray from an N-dimensional array flattened in a CSV file.\n\nIf there is one dimension then the file must have a single row with dimension names. If there is more than one dimension then it must conform to the following format:\n\nThe header row consists of dimension names for the first N-1 dimensions followed by the last dimension's element ids pivoted out to form data column headers.\n\nThe data rows contain dimension element ids in the first N-1 columns followed by parameter values in the remaining columns. Each value maps to the dimension element ids listed in the row's first N-1 columns plus the dimension element id found in that value's column.\n\n3-dimension example:\n\nd1variablename,d2variablename,d3name1,d3name2,d3name3 d1name1,d2name1,1.0,1.0,1.0 d1name2,d2_name2,1.0,1.0,1.0\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.read_param-Tuple{AbstractString, AbstractString, AbstractString, HolisticElectricityModel.Dimension, Vector{HolisticElectricityModel.Dimension}}","page":"API","title":"HolisticElectricityModel.read_param","text":"read_param(\n    name::AbstractString,\n    dirpath::AbstractString,\n    filename::AbstractString,\n    column_index::HolisticElectricityModel.Dimension,\n    row_indices::Vector{HolisticElectricityModel.Dimension};\n    prose_name,\n    description\n) -> HolisticElectricityModel.ParamArray\n\n\nReads parameter data from the csv file at dirpath/filename. Assumes the data has  a single header row, and that the columnindex elements are the right-most column  names. All other data dimension values are listed in the first length(rowindices)  columns of the file, corresonding one-to-one and in the same order as the row_indices.\n\nReturns the data loaded into a ParamAxisArray with dimensions  (rowindices..., columnindex).\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.read_param-Tuple{AbstractString, AbstractString, AbstractString, HolisticElectricityModel.Dimension}","page":"API","title":"HolisticElectricityModel.read_param","text":"read_param(\n    name::AbstractString,\n    dirpath::AbstractString,\n    filename::AbstractString,\n    index::HolisticElectricityModel.Dimension;\n    prose_name,\n    description\n) -> HolisticElectricityModel.ParamArray{1}\n\n\nReads parameter data from the csv file at dirpath/filename. Assumes the data has a  single header row, and that the index elements comprise the column names.\n\nReturns the data loaded into a ParamAxisArray.\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.read_set-Tuple{AbstractString, AbstractString, AbstractString}","page":"API","title":"HolisticElectricityModel.read_set","text":"read_set(\n    dirpath::AbstractString,\n    filename::AbstractString,\n    name::AbstractString;\n    prose_name,\n    description\n) -> HolisticElectricityModel.Dimension\n\n\nread_set(filename, filename)\n\nReads the column names of csv dirpath/filename in as symbols.\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.run_hem-Tuple{AbstractString, HEMOptions}","page":"API","title":"HolisticElectricityModel.run_hem","text":"run_hem(\n    input_dir::AbstractString,\n    options::HEMOptions;\n    ipp_options,\n    regulator_options,\n    utility_options,\n    green_developer_options,\n    customer_options,\n    dera_options,\n    max_iterations,\n    window_length,\n    force,\n    jump_model\n)\n\n\nSolve the problem with the given inputs.\n\nArguments\n\ninput_dir::AbstractString: Directory containing input data. Outputs will be recorded in a subdirectory.\noptions::HEMOptions:\nipp_options::IPPOptions: Independent Power Producer options. Defaults to NullAgentOptions.\nregulator_options::RegulatorOptions: Regulator options. Defaults to NullAgentOptions.\nutility_options::RegulatorOptions: Regulator options. Defaults to NullAgentOptions.\nmax_iterations::Int: Max number of iterations to attempt a solution. Defaults to 100.\nwindow_length::Int:\nforce::Bool: If true, overwrite results if a directory already exists.\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.set_log_level-Tuple{Base.CoreLogging.LogLevel}","page":"API","title":"HolisticElectricityModel.set_log_level","text":"set_log_level(level::Base.CoreLogging.LogLevel) -> Any\n\n\nSets the log level to, e.g., Logging.Debug, Logging.Warn. Currently only  implemented for ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.update_cumulative!-Tuple{HEMData, AbstractAgent}","page":"API","title":"HolisticElectricityModel.update_cumulative!","text":"update_cumulative!(\n    model_data::HEMData,\n    agent::AbstractAgent\n)\n\n\nDefault no-op method for updating cumulative parameters in AbstractAgents after each model year.\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.update_cumulative!-Tuple{HEMData, IPPGroup}","page":"API","title":"HolisticElectricityModel.update_cumulative!","text":"update_cumulative!(model_data::HEMData, ipp::IPPGroup)\n\n\nUpdate IPPGroup cumulative parameters\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.update_cumulative!-Tuple{HEMData, Utility}","page":"API","title":"HolisticElectricityModel.update_cumulative!","text":"update_cumulative!(model_data::HEMData, utility::Utility)\n\n\nUpdate Utility cumulative parameters\n\n\n\n\n\n","category":"method"},{"location":"HolisticElectricityModel/#HolisticElectricityModel.update_total_capacity!-Tuple{HolisticElectricityModel.ParamArray, HolisticElectricityModel.ParamArray, HEMData, Integer, Symbol, Symbol, Symbol}","page":"API","title":"HolisticElectricityModel.update_total_capacity!","text":"update_total_capacity!(\n    total_capacity_my::HolisticElectricityModel.ParamArray,\n    x_DG_new::HolisticElectricityModel.ParamArray,\n    model_data::HEMData,\n    reg_year::Integer,\n    z::Symbol,\n    h::Symbol,\n    m::Symbol\n)\n\n\nCalculates cumulative capacity for this year and future years if this technology was a build option.\n\n\n\n\n\n","category":"method"},{"location":"quickstartguide/#Quick-Start-Guide","page":"Quick Start Guide","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickstartguide/#Pre-requisites","page":"Quick Start Guide","title":"Pre-requisites","text":"","category":"section"},{"location":"quickstartguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"Julia: HolisticElectricityModel is written in Julia. Instructions to install Julia can be found in the julia website.  If this is your first time using Julia visit the official Getting started with Julia.\nSolvers: Running HEM requires access to LP and MIP solvers. Because different choices can be made in this regard, we recommend setting up your computational environment based on one of the environments under runner. At NREL we recommend using Gurobi for HPC and Xpress for local runs.\nData: The data for which the simulation will be run needs to be pre-populated and placed in the local directory. Instructions on how to generate run inputs can be found in the HolisticElectricityModelData.jl repository.","category":"page"},{"location":"quickstartguide/#Running-Your-First-Model","page":"Quick Start Guide","title":"Running Your First Model","text":"","category":"section"},{"location":"quickstartguide/#Running-on-NREL-HPC","page":"Quick Start Guide","title":"Running on NREL HPC","text":"","category":"section"},{"location":"quickstartguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"Set up the model configurations using the hem_config.yaml file in HolisticElectricityModel.jl/script/configs/. Make sure that the solver is 'Gurobi'.\nLoad the Gurobi module","category":"page"},{"location":"quickstartguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"> module load gurobi/11.0.2","category":"page"},{"location":"quickstartguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"and then use the `hem.jl` script for your model runs.\n\nFor example, to run in interactive mode on a debug node:","category":"page"},{"location":"quickstartguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"> salloc -N 1 -t 60 --account=hem --partition=debug\n# ... Wait for a compute node\n> cd HolisticElectricityModel.jl\n> module load gurobi/11.0.2\n> julia --project=runner/Gurobi script/hem.jl","category":"page"},{"location":"quickstartguide/#Running-on-NREL-Laptop","page":"Quick Start Guide","title":"Running on NREL Laptop","text":"","category":"section"},{"location":"quickstartguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"Ensure that Xpress is installed and activated.\nSet up the model configurations using the hem_config.yaml file in HolisticElectricityModel.jl/script/configs/. Make sure that the solver is 'Xpress'.\nActivate the runner/Xpress environment and run the hem.jl script.","category":"page"},{"location":"quickstartguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"$ cd HolisticElectricityModel.jl\n$ julia --project=runner/Xpress script/hem.jl","category":"page"},{"location":"dev_guide/logging/#Logging","page":"Logging","title":"Logging","text":"","category":"section"},{"location":"dev_guide/logging/","page":"Logging","title":"Logging","text":"HolisticElectricityModel.jl uses InfrastructureSystems.jl for logging services.  Refer to its Logging documentation for details.","category":"page"},{"location":"#HolisticElectricityModel.jl","page":"Welcome Page","title":"HolisticElectricityModel.jl","text":"","category":"section"},{"location":"#Overview","page":"Welcome Page","title":"Overview","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"HolisticElectricityModel.jl (HEM) is a Julia package that provides a computational framework for analyzing electricity systems in their entirety, from the points of view of all key stakeholders. Within HEM, various stakeholders operate as independent agents with different constraints, objectives, and decision-making processes. HEM iteratively captures the interactions between the different agents and the influence of their decisions on the evolution of the system under study year by year. ","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Guo, Nongchao, Elaine Hale, Jessica Lau, Jenny Heeter, Mark O’Malley, Bryan Palmintier, and Shanti Pless. 2023. “Integrated, Multi-Stakeholder Analysis of Electricity System Structures: Methodology and a Case Study.” IEEE Transactions on Energy Markets, Policy and Regulation 1 (4): 237–47. https://doi.org/10.1109/TEMPR.2023.3277345.","category":"page"},{"location":"#Installation","page":"Welcome Page","title":"Installation","text":"","category":"section"},{"location":"#NREL-HPC-Instructions","page":"Welcome Page","title":"NREL HPC Instructions","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"(Skip this step if Julia is already installed on the HPC)","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Go to https://julialang.org/downloads and copy the link to the latest supported Julia Linux image (currently Julia 1.10.0).\nssh to NREL HPC (currently Kestrel) and download the image.","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"$ ssh kestrel.hpc.nrel.gov\n$ wget https://julialang-s3.julialang.org/bin/linux/x64/1.8/julia-1.10.0-linux-x86_64.tar.gz\n$ tar -xzf julia-1.10.0-linux-x86_64.tar.gz","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Add lines analogous to these to your ~/.bashrc file on the HPC:","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"# User specific aliases and functions\nalias julia=\"/home/<user_name>/julia-1.10.0/bin/julia\"","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Reload the file so that you can run julia.","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"$ source ~/.bashrc","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Once on a login node, make it so the required packages will load. Also, load the latest suported Gurobi solver (currently 11.0.0):","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"> module load gurobi/11.0.2\n> julia --project=runner/Gurobi","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"julia> ]\npkg> dev .\npkg> instantiate\npkg> build Gurobi","category":"page"},{"location":"#NREL-Laptop-Instructions","page":"Welcome Page","title":"NREL Laptop Instructions","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Go to https://julialang.org/downloads/ and install Julia based on the OS.\nInstall the Xpress solver\nUpdate the .bashrc file similar to the HPC (depending on the OS).\nLoad julia and set up the packages.","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"$ julia --project=runner/Xpress","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"julia> ]\npkg> dev .\npkg> instantiate\npkg> build Xpress","category":"page"},{"location":"dev_guide/inputs/#Inputs","page":"Inputs","title":"Inputs","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"Inputs used to run the Holistic Electricity Model: indices and parameters.","category":"page"},{"location":"dev_guide/inputs/#Indices","page":"Inputs","title":"Indices","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"Indices are the dimensions along which the rest of the data are organized, such as the types of generation and storage resources, number of independent power producers, the balancing areas considered, the representative days and hours in the model, etc. Indices are always single-dimensional, with individual values arrayed in the first row of a .csv file (i.e., serialized as a row vector).","category":"page"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"In limited cases, mappings between two or three indices must also be provided. Mapping files contain two or three columns labeled with the name of each index being mapped. The presence of an entry is interpreted as membership or a scaling factor of 1.0, whereas absence from the file is interpreted as non-membership or a scaling factor of 0.0.","category":"page"},{"location":"dev_guide/inputs/#Common-Indices","page":"Inputs","title":"Common Indices","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"index_y.csv: Simulation years, e.g., 2020, 2021, .... The file is used to generate two indices within HEM. The current simulation window is defined by index_y. index_y_fix represents the full simulation horizon (equal to the years listed in the .csv file) and does not change. Year indices are used in HEM as both strings (for labeling other data) and integers (for iterating and performing calculations).\nindex_s.csv: Years from initial build over which new resources depreciate. For example, this could be a list of integers 1, 2, ..., 15.\nindex_d.csv: Representative days. When using data from ReEDS, each day is represented as d[0-9][0-9][0-9] but there is no constraint in the model regarding how representative days are labeled.\nindex_t.csv: Row vector of representative hours within each representative day. When using data from ReEDS, each hour is represented as h[0-9][0-9][0-9]. Currently the model assumes that all characters except the first in each label can be converted to integer and interpreted as the last hour of the day (of the hours 1 to 24) included in this representative time period. The model also assumes that each representative hour represents the same amount of time.\nindex_h.csv: Customer groups. Example values are Residential, Commercial, Industrial, but this index can also be used to differentiate customer data more finely.\nindex_z.csv: Balancing areas (BAs) / utility zones. HEMData.jl provides data parsing tied to the [ReEDS BAs]((https://www.nrel.gov/analysis/assets/pdfs/reeds-model-regions-map.pdf).\nindex_sector.csv: High-level customer groups used to establish classes for rate-making. Example values are Residential, Commercial, Industrial.\nindex_h_sector_mapping.csv: File that maps each customer type in index_h to a high-level customer group (for rate-making) in index_sector. It consists of two columns, index_h and index_sector.","category":"page"},{"location":"dev_guide/inputs/#Agent-Specfic-Indices","page":"Inputs","title":"Agent-Specfic Indices","text":"","category":"section"},{"location":"dev_guide/inputs/#Regulator","page":"Inputs","title":"Regulator","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"index_rate_tou.csv: Index for supported time-of-use rate periods. Example values are Off-Peak, On-Peak, Mid-Peak.\ntou_rate_structure_$(tou_suffix).csv: Time-of-use rate period assigned to each representative day and hour combination. The column names are index_d, index_t and index_rate_tou. Here, the input file selected depends on the tou_suffix specified in the config.yaml file under regulator_options.","category":"page"},{"location":"dev_guide/inputs/#Utility-and-IPPGroup","page":"Inputs","title":"Utility and IPPGroup","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"index_k_existing.csv: Existing bulk generation technologies, e.g., coaloldscr, gas-ct, nuclear, wind-ofs etc.\nindex_k_new.csv: Bulk generation technologies available for new investment, e.g., coaloldscr, gas-ct, nuclear, wind-ofs etc.\nindex_rps.csv: Renewable Potfolio Standard (RPS) qualified technologies, e.g., biopower, wind-ofs etc.\nindex_stor_existing.csv: Existing bulk storage technologies, e.g., battery_1, battery_2 etc.\nindex_stor_new.csv: Bulk storage technologies available for new investment, e.g., battery_1, battery_2 etc.\nindex_l.csv: Transmission lines. Each line is represented as \\$(origin_zone)||\\$(destination_zone), e.g., p100||p101. Both origin_zone and destination_zone are required to be elements of index_z.\nindex_p.csv: Individual independent power producers (IPP). Cosnsists of a single row of IPP names.","category":"page"},{"location":"dev_guide/inputs/#Customer","page":"Inputs","title":"Customer","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"index_m.csv: Behind-The-Meter (BTM) technologies, e.g., BTMPV, BTMStorage. Currently these index values are hard-coded into the model and would be difficult to change/remove.","category":"page"},{"location":"dev_guide/inputs/#Green-Developer","page":"Inputs","title":"Green Developer","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"Agent code and data are nominally available, but have not been used in analysis, tested recently, or maintained.","category":"page"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"index_j.csv: Green technology types. Example values are biopower, wind-ons, wind-ofs. This index is related to the GreenDeveloper agent and direct purchases of clean electricity by customers through power purchase agreements.","category":"page"},{"location":"dev_guide/inputs/#Parameters","page":"Inputs","title":"Parameters","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"Parameters contain numeric data defined over zero, one, or more indices. If the parameters is a scalar (no indices), its value is expected to be in the first row and column of the .csv file. If the parameter is defined over a single index, the elements of that index (values or tags that define the contents of the index) are listed in the first row, with the corresponding numeric values listed below, in the second row of the .csv file. If the parameter is defined over multiple (n) indices, all but one of the indices form the first n-1 columns, with the name of the index in the first row and its elements listed below. The last index's elements are listed in the first row starting in the n^th column. Numeric values are arrayed under the columns defined by the last index's elements.","category":"page"},{"location":"dev_guide/inputs/#Model-Parameters","page":"Inputs","title":"Model Parameters","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"Omega.csv: Number of days per representative day. Defined over index_d, and generally expected to sum to 365.0.\nGamma.csv: Number of customers of type h (index_h) in zone z (index_z). Column names are index_z, followed by the index_h elements (e.g., Commercial, Residential, Industrial).\nYear.csv: Numeric values of index_y, defined over index_y, that is, two rows containing the elements in index_y.\nTime.csv: Last hour (of hours 1, 2, ..., 24) represented by each element of index_t, defined over index_t. For ReEDS representative hours, corresponds to the integer obtained by parsing all but the first character of the element string (i.e., 4, 8, 12, 16, 20, 24).","category":"page"},{"location":"dev_guide/inputs/#Existing-System-Parameters-(used-throughout,-especially-by-Utility,-IPPGroup,-CustomerGroup,-and-Regulator)","page":"Inputs","title":"Existing System Parameters (used throughout, especially by Utility, IPPGroup, CustomerGroup, and Regulator)","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"ExistingStorDuration.csv: Duration (hours) of new storage technologies. Column names are the new storage technology names in index_stor_existing (e.g., battery_1, battery_2, ...).\nExistingStorInitialEnergy.csv: Initial stored energy (Mwh) for existing storage resources in index_stor_existing by year in index_y, zone in index_z and day in index_d. Column names are index_y, index_stor, index_z, followed by the days in index_d (e.g., d001, d002, ...).\nExistingStorInitialEnergyIPP.csv: Initial energy (MWh) for existing storage resources in index_stor_existing by year in index_y, IPP in index_p, zone in index_z and day in index_d. Column names are index_y, index_stor, index_p, index_z, followed by the days in index_d (e.g., d001, d002, ...).\nTransmissionTopology.csv: Topology of the transmission system expressed as an incidence matrix between the lines in index_l and the zones in index_z. Column names are index_l, followed by the zones in index_z (e.g., p100, p101, ... etc.) with the values being +1 if the zone is the origin or -1 if it is the destination.\nExistingCapacityIPP.csv: Existing capacity (MWh) for each IPP in index_p, zone in index_z and generation type in index_k_existing. Column names are index_p, index_z, followed by existing generation technologies in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nExistingStorCapacityIPP.csv: Storage capacity (MWh) for each IPP in index_p, zone in index_z and generation type in index_stor_existing. Column names are index_p, index_z, followed by existing storage technologies in index_stor_existing (e.g., battery_1, battery_2, ...).\nExistingDER.csv: Exisiting DER capacity (MWh) of the BTM technologies for each customer group in index_h and zone in index_z. Column names are index_h, index_z, folowed by the technology names in index_m (e.g., BTMPV, BTMStorage).\nExistingDERmy.csv: Exisiting DER capacity (MWh) of the BTM technologies for each customer group in index_h and zone in index_z. Column names are index_h, index_z, folowed by the technology names in index_m (e.g., BTMPV, BTMStorage).\nExport.csv: Net export (MWh) in the representative hours for each index_z zone and index_d day combination. The column names are index_z, index_d, followed by the representative hours in index_t (e.g., h001, h002, h003).\nExportmy.csv: Multi-year net export (MWh) in the representative hours for each index_y year, index_z zone, index_d day combination. The column names are index_y, index_z, index_d, followed by the representative hours in index_t (e.g., h001, h002, h003).\nDemand.csv: Demand (MWh) for each customer group in index_h, zone in index_z, representative day in index_d and representative hour in index_t. The column names are index_h, index_z, index_d, followed by the representative hours in index_t (e.g., h001, h002, h003).\nDemandmy.csv: Multi-year demand (MWh) for each year in index_y, customer group in index_h, zone in index_z, representative day in index_d and representative hour in index_t. The column names are index_y, index_h, index_z, index_d, followed by the representative hours in index_t (e.g., h001, h002, h003).","category":"page"},{"location":"dev_guide/inputs/#Hourly-Resource-Data","page":"Inputs","title":"Hourly Resource Data","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"AvailabilityDER.csv: Availability of DER units (fraction) defined over customer types in index_h, BTM technologies in index_m, zones in index_z, representative days in index_d and hours in index_t. Column names are index_h, index_m, index_z, index_d, followed by represenative hours in index_t (e.g., h004, h008, ...).\nAvailabilityNew.csv: Availability of new units (fraction) defined over technology types in index_k_new, zones in index_z, representative days in index_d and hours in index_t. Column names are index_k_new, index_z, index_d, followed by represenative hours in index_t  (e.g., h001, h002, ...).\nAvailabilityNewIPP.csv: Availability of new units (fraction) defined over IPPs in index_p, technology types in index_k_new, zones in index_z, representative days in index_d and hours in index_t. Column names are index_p, index_k_new, index_z, index_d, followed by represenative hours in index_t  (e.g., h001, h002, ...).\nAvailabilityOld.csv: Availability of existing units (fraction) defined over technology types in index_k_existing, zones in index_z, representative days in index_d and hours in index_t. Column names are index_k_new, index_z, index_d, followed by represenative hours in index_t  (e.g., h001, h002, ...).\nAvailabilityOldIPP.csc: Availability of existing units (fraction) defined over IPPs in index_p, technology types in index_k_existing, zones in index_z, representative days in index_d and hours in index_t. Column names are index_p, index_k_existing, index_z, index_d, followed by represenative hours in index_t  (e.g., h001, h002, ...).","category":"page"},{"location":"dev_guide/inputs/#Financial-Parameters","page":"Inputs","title":"Financial Parameters","text":"","category":"section"},{"location":"dev_guide/inputs/#New-Resources","page":"Inputs","title":"New Resources","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"Lifetime_new.csv: Lifetime of new generation technologies in index_k_new in years, columns are technology names in index_k_new (e.g., gas-ct, gas-cc, upv etc.).\nLifetimeNewIPP.csv: Lifetime of new generation technologies in years by IPPs in index_p. Columns are index_p, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nLifetimeStorNew.csv: Lifetime of storage technologies in index_k_new in years, columns are technology names in index_stor_new (e.g., battery_2, battery_4, ...).\nLifetimeStorNewIPP.csv: Lifetime of new storage technologies in years by IPPs in index_p. Columns are index_p, followed by storage technology names in index_stor_new(e.g., battery_1, battery_2, ...).","category":"page"},{"location":"dev_guide/inputs/#Incentives","page":"Inputs","title":"Incentives","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"PTCNew.csv: Production Tax Credit (PTC) ($/MW) for new generation technologies. Columns are technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nPTCNewmy.csv: Multi-year Production Tax Credit (PTC) ($/MW) for new generation technologies defined over years in in index_y. Columns are index_y, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nPTCOld.csv: Production Tax Credit (PTC) ($/MW) for existing generation technologies. Columns are technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nPTCNewmy.csv: Multi-year Production Tax Credit (PTC) ($/MW) for new generation technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nITCNew.csv: Investment Tax Credit (ITC) (fraction) for new generation technologies. Columns are technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nITCNewmy.csv: Multi-year Investment Tax Credit (ITC) (fraction) for new generation technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nITCStorNewmy.csv: Multi-year Investment Tax Credit (ITC) (fraction) for new storage technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_stor_new (e.g., battery_1, battery_2, ...).\nITCOld.csv: Investment Tax Credit (ITC) (fraction) for existing generation technologies. Columns are technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nITCStorOld.csv: Investment Tax Credit (ITC) (fraction) for existing storage technologies. Columns are technology names in index_stor_existing (e.g., battery_1, battery_2, ...).","category":"page"},{"location":"dev_guide/inputs/#Bulk-Resources-(Utility-and-IPPGroup)","page":"Inputs","title":"Bulk Resources (Utility and IPPGroup)","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"DebtRatio.csv: Debt ratio. Currently this file is only used by the IPPGroup and the debt ratio is defined over index_p (e.g., one column called ipp1). Other supply-side agents (i.e., Utility, GreenDeveloper, DistributionUtility) have a debt ratio defined, but right now these are hard coded in those agents' constructors.\nCOD.csv: Cost of debt (%). Currently it is only used for IPP (for others they are constants). Column name is the IPP agent names in index_p (e.g. ipp1).\nCOE.csv: Cost of equity (fraction). Currently it is only used for IPP (for others they are constants). Column name is the IPP agent names in index_p (e.g. ipp1).\nTax.csv: Tax rate by IPP type. Column names are the IPP names in index_p (e.g., ipp1).\nCumuTaxDepreOld.csv: Cumulative tax depreciation of existing generation technologies. Columns are technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nCumuTaxDepreOldmy.csv: Multi-year cumulative tax depreciation of existing generation technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nCumuTaxDepreStorOldmy.csv: Multi-year cumulative tax depreciation of existing storage technologies, defined over years in index_y. Columns are index_y, followed by existing storage technology names in index_stor_existing (e.g., battery_1, battery_2, ...).\nCumuTaxDepreNew.csv: Cumulative tax depreciation of new generation technologies. Columns are technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nCumuTaxDepreNewmy.csv: Multi-year cumulative tax depreciation of new generation technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nCumuTaxDepreStorNewmy.csv: Multi-year cumulative tax depreciation of new storage technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_stor_new (e.g., battery_1, battery_2, ...).\nCumuAccoutDepreOld.csv: Cumulative tax depreciation of existing generation technologies. Columns are technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nCumuAccoutDepreNew.csv: Cumulative accounting depreciation of new generation technologies. Columns are technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nCumuAccoutDepreNewmy.csv: Multi-year accounting depreciation of new generation technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nCumuAccoutDepreStorNewmy.csv: Multi-year accounting depreciation of new storage technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_stor_new (e.g., gas-ct, gas-cc, upv, ...).\nAnnualTaxDepreNewmy.csv: Multi-year annual tax depreciation of new generation technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nAnnualTaxDepreStorNewmy.csv: Multi-year annual tax depreciation of new storage technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_stor_new (e.g., gas-ct, gas-cc, upv, ...).","category":"page"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"AnnualTaxDepreOldmy.csv: Multi-year annual tax depreciation of existing generation technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nAnnualTaxDepreStorOldmy.csv: Multi-year annual tax depreciation of existing storage technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_stor_existing (e.g., battery_1, battery_2, ...).\nAnnualAccoutDepreNewmy.csv: Multi-year annual accounting depreciation of existing generation technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nAnnualAccoutDepreStorNewmy.csv: Multi-year annual accounting depreciation of new generation technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_stor_new (e.g., battery_1, battery_2, ...).\nAnnualAccoutDepreOld.csv: Annual accounting depreciation of existing generation technologies. Columns are technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nCumuAccoutDepreOldmy.csv: Multi-year accounting depreciation of existing generation technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nCumuAccoutDepreStorOldmy.csv: Multi-year accounting depreciation of existing storage technologies, defined over years in index_y. Columns are index_y, followed by storage technology names in index_stor_existing (e.g., battery_1, battery_2, ...).\nCumuITCAmortNew.csv: Cumulative amortized ITC (fraction) for new generation technologies. Columns are technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nCumuITCAmortNewmy.csv: Multi-year cumulative amortized ITC (fraction) for new generation technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nCumuITCAmortStorNewmy.csv: Multi-year cumulative amortized ITC (fraction) for new storage technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_stor_new (e.g., battery_1, battery_2, ...).\nCumuITCAmortOldmy.csv: Multi-year cumulative amortized ITC (fraction) for existing generation technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nCumuITCAmortStorOldmy.csv: Multi-year cumulative amortized ITC (fraction) for existing storage technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_stor_existing (e.g., battery_1, battery_2 ...).\nAnnualITCAmortNewmy.csv: Multi-year annual amortized ITC (fraction) for new generation technologies, defined over years i index_y. Columns are index_y, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nAnnualITCAmortStorNewmy.csv: Multi-year annual amortized ITC (fraction) for new storage technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_stor_new (e.g., battery_1, battery_2, ...).\nAnnualITCAmortOldmy.csv: Multi-year annual amortized ITC (fraction) for existing generation technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nAnnualITCAmortStorOldmy.csv: Multi-year annual amortized ITC (fraction) for existing storage technologies, defined over years in index_y. Columns are index_y, followed by technology names in index_stor_existing (e.g., battery_1, battery_2, ...).","category":"page"},{"location":"dev_guide/inputs/#Demand-Side-(CustomerGroup)","page":"Inputs","title":"Demand-Side (CustomerGroup)","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"CustomerDebtRatio.csv: Customer debt ratio by customer type for zones in index_z. Column names are index_z, followed by customer group types in index_h (e.g., index_z, Residential, Commercial, Industrial).\nCustomerCOD.csv: Customer cost of debt (fraction) by customer type for zones in index_z. Column names are index_z, followed by customer group types in index_h (e.g., index_z, Residential, Commercial, Industrial).\nCustomerCOE.csv: Customer cost of equity (fraction) by customer type for zones in index_z. Column names are index_z, followed by customer group types in index_h (e.g., index_z, Residential, Commercial, Industrial).\nCustomerTax.csv: Customer tax rate by customer type for zones in index_z. Column names are index_z, followed by customer group types in index_h (e.g., index_z, Residential, Commercial, Industrial).\nDER_ITCNew.csv: ITC for new DERs. Columns are BTM technology names in index_m (e.g., BTMPV, BTMStorage).\nDER_ITCNewmy.csv: Multi-year ITC for new DERs. Columns are index_y, followed by BTM technology names in index_m (e.g., BTMPV, BTMStorage).","category":"page"},{"location":"dev_guide/inputs/#SupplyChoice-Use-Case-(GreenDeveloper)","page":"Inputs","title":"SupplyChoice Use Case (GreenDeveloper)","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"Agent code and data are nominally available, but have not been used in analysis, tested recently, or maintained.","category":"page"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"RetailCompetition.csv: Retail competition rates by year (used to calculate green tariff subscription percentages). Column names are years in index_y (e.g., 2021, 2022).","category":"page"},{"location":"dev_guide/inputs/#Rate-Making-(Regulator)","page":"Inputs","title":"Rate-Making (Regulator)","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"distribution_cost.csv: Distribution cost ($) for each zone in index_z and for each year in index_y. The column names are index_z, followed by each year in index_y (e.g., 2021, 2022). The filenames imply the corresponding type of cost.\nadministration_cost.csv: Administration cost ($) for each zone in index_z and for each year in index_y. The column names are index_z, followed by each year in index_y (e.g., 2021, 2022). The filenames imply the corresponding type of cost.\ntransmission_cost.csv: Transmission cost ($) for each zone in index_z and for each year in index_y. The column names are index_z, followed by each year in index_y (e.g., 2021, 2022). The filenames imply the corresponding type of cost.\ninterconnection_cost.csv: Interconnection cost ($) for each zone in index_z and for each year in index_y. The column names are index_z, followed by each year in index_y (e.g., 2021, 2022). The filenames imply the corresponding type of cost.\nsystem_cost.csv: System cost ($ )for each zone in index_z and for each year in index_y. The column names are index_z, followed by each year in index_y (e.g., 2021, 2022). The filenames imply the corresponding type of cost.","category":"page"},{"location":"dev_guide/inputs/#Bulk-System-Cost-Parameters-(Utility-and-IPPGroup)","page":"Inputs","title":"Bulk System Cost Parameters (Utility and IPPGroup)","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"FOMNew.csv: Fixed Operation and Maintenance cost ($/MW-yr) of new generation technologies for each index_z zone. Columns are index_z, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nFOMNewmy.csv: Multi-year fixed Operation and Maintenance cost ($/MW-yr) of new generation technologies for each zone in index_z and each year in index_y. Columns are index_y, index_z, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nFOMNewIPP.csv: Fixed Operation and Maintenance cost ($/MW-yr) of new generation technologies for each IPP in index_p. Columns are index_p, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nFOMNewIPPmy.csv: Multi-year fixed Operation and Maintenance cost ($/MW-yr) of new generation technologies for each IPP in index_p and year in index_y. Columns are index_y, index_p, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nCapExNew.csv: Capital cost ($/MW) of new generation technologies for each index_z zone. Columns are index_z, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nCapExNewmy.csv: Multi-year capital cost ($/MW) of new generation technologies for each zone in index_z and year in index_y. Columns are index_y, index_z, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nCapExNewIPP.csv: Capital cost ($/MW) of new generation technologies for each ipp in index_p, for each zone in index_z. Columns are index_p, index_z, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nCapExNewIPPmy.csv: Multi-year capital cost ($/MW) of new generation technologies for each ipp in index_p, zone in index_z, and year in index_y. Columns are index_y, index_p, index_z, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nStorCapExNew.csv: Capital cost ($/MW) of new storage technologies for each zone in index_z. Columns are index_z followed by technology names in index_stor_new (e.g., battery_1, battery_2, ...).\nStorCapExNewIPP.csv: Capital cost ($/MW) of new storage technologies for each IPP in index_p, zone in index_z. Columns are index_p, index_z followed by technology names in index_stor_new (e.g., battery_1, battery_2, ...).\nStorCapExNewIPPmy.csv: Multi-year capital cost ($/MW) of new storage technologies for each IPP in index_p, zone in index_z and year in index_y. Columns are index_y, index_p,, index_z followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nCapExOld.csv: Capital cost ($/MW) of existing generation technologies for each index_z zone. Columns are index_z, followed by technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nCapExStorOld.csv: Capital cost ($/MW) of existing storage technologies for each index_z zone. Columns are index_z, followed by storage technologies in index_stor_existing (e.g., battery_1, battery_2, ...).\nFixedCostOld.csv: Fixed cost ($/MW) of existing generation technologies by zone in index_z. Column names are index_z, followed by technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nFixedCostOldmy.csv: Multi-year fixed cost ($/MW ) of existing generation technologies by zone in index_z, year in index_y. Column names are index_y, index_z, followed by technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nFixedCostOldIPP.csv: Fixed cost ($/MW) of existing generation technologies by IPP in index_p and zone in index_z. Column names are index_p, index_z, followed by technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nFixedCostOldIPPmy.csv: Multi-year fixed cost ($/MW) of existing generation technologies by IPP in index_p, zone in index_z, year in index_y. Column names are index_y, index_p, index_z, followed by technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nFixedCostStorOld.csv: Fixed cost ($/MW ) of existing storage technologies by zone in index_z. Column names are index_z, followed by technology names in index_stor_existing (e.g., battery_1, battery_2, ...).\nFixedCostStorOldmy.csv: Multi-year fixed cost ($/MW ) of existing storage technologies by zone in index_z, year in index_y. Column names are index_z, followed by technology names in index_stor_existing (e.g., battery_1, battery_2, ...).\nFixedCostStorOldIPP.csv: Fixed cost ($/MW) of existing storage technologies by IPP in index_p and zone in index_z. Column names are index_p, index_z, followed by technology names in index_stor_existing (e.g., battery_1, battery_2, ...).\nFixedCostStorOldIPPmy.csv: Multi-year fixed cost ($/MW) of existing storage technologies in by IPP in index_p, zone in index_z, and year in index_y. Column names are index_y, index_p, index_z, followed by technology names in index_stor_existing (e.g., battery_1, battery_2, ...).\nVariableCostNew.csv: Variable cost ($/MW) of new generation technologies by zone in index_z. Column names are index_z, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nVariableCostNewmy.csv: Multi-year variable cost ($/MW) of new generation technologies by zone in index_z, year in index_y. Column names are index_y, index_z, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nVariableCostOld.csv: Variable cost ($/MW) of existing generation technologies by zone in index_z. Column names are index_z, followed by technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nVariableCostOldmy.csv: Multi-year variable cost ($/MW) of existing generation technologies by zone in index_z, year in index_y. Column names are index_y, index_z, followed by technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nVariableCostNewIPP.csv: Variable cost ($/MW) of new generation technologies by IPP in index_p, and zone in index_z. Column names are index_p, index_z, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nVariableCostNewIPPmy.csv: Multi-year variable cost ($/MW) of new generation technologies by IPP in index_p, zone in index_z, and year in index_y. Column names are index_y, index_p, index_z, followed by technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nVariableCostOldIPP.csv: Variable cost ($/MW) of existing generation technologies by IPP in index_p and zone in index_z. Column names are index_p, index_z, followed by technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nVariableCostOldIPPmy.csv: Multi-year variable cost ($/MW) of existing generation technologies by IPP in index_p, zone in index_z, and year in index_y. Column names are index_y, index_p, index_z, followed by technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nStorFOMNew.csv: Fixed operation and maintenance cost ($/MW-yr) of new storage technologies for each zone in index_z. Columns are index_z, followed by technology names in index_stor_new (e.g., battery_1, battery_2, ...).\nStorFOMNewmy.csv: Multi-year fixed operation and maintenance cost ($/MW-yr) of new storage technologies for each zone in index_z and year in index_y. Columns are index_y, index_z, followed by technology names in index_stor_new (e.g., battery_1, battery_2, ...).\nStorFOMNewIPP.csv: Fixed operation and maintenance cost ($/MW-yr) of new storage technologies for each IPP in index_p and zone in index_z. Columns are index_p, index_z, followed by technology names in index_stor_new (e.g., battery_1, battery_2, ...).\nStorFOMNewIPPmy.csv: Multi-year fixed operation and maintenance cost ($/MW-yr) of new storage technologies for each IPP in index_p, zone in index_z and year in index_y. Columns are index_y, index_p, index_z, followed by technology names in index_stor_new (e.g., battery_1, battery_2, ...).","category":"page"},{"location":"dev_guide/inputs/#Customer-Cost-Parameters-(CustomerGroup)","page":"Inputs","title":"Customer Cost Parameters (CustomerGroup)","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"CapExDER.csv: Capital cost ($/MW) of BTM technologies for each index_z zone and customer type in index_h. Columns are index_z, index_h, followed by technologies in index_m (e.g., BTMPV, BTMStorage).\nCapExDERmy.csv: Multi-year capital cost ($/MW) of BTM technologies for each year in index_y, zone in index_z and customer type in index_h. Columns are index_y, index_z, index_h, followed by technologies in index_m (e.g., BTMPV, BTMStorage).\nFOMDER.csv: Fixed operation and maintenance cost ($/MW-yr) of new BTM generation technologies for each zone in index_z and for each customer type in index_h. Columns are index_z, index_h, followed by technology names in index_m (e.g., BTMPV, BTMStorage).","category":"page"},{"location":"dev_guide/inputs/#Capacity-Market-Parameters-(IPPGroup)","page":"Inputs","title":"Capacity Market Parameters (IPPGroup)","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"NetCONE.csv: Net Cost of New Entry for capacity market ($/MW-yr). Column names are the years in index_y (e.g., 2021, 2022, ...).\nDC_length.csv: Capacity market demand curve length (zero-crossing point of the demand curve) for each year in index_y. Column names are years in index_y (e.g., 2021, 2022).","category":"page"},{"location":"dev_guide/inputs/#Technology-Parameters","page":"Inputs","title":"Technology Parameters","text":"","category":"section"},{"location":"dev_guide/inputs/#Technology-Performance-for-Existing-and-Future-Resources-(Utility-and-IPPGroup)","page":"Inputs","title":"Technology Performance for Existing and Future Resources (Utility and IPPGroup)","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"StorRTENew.csv: Round-trip efficiency (fraction) of new storage resources for each zone in index_z. Column names are index_z, followed by the technolgies in index_stor_new (e.g., battery_1, battery_2, ...).\nStorRTENewmy.csv: Multi-year round-trip efficiency (fraction) of new storage resources by year in index_y and zone in index_z. Column names are index_y, index_z, followed by the technolgies in index_stor_new (e.g., battery_1, battery_2, ...).\nStorRTENewIPP.csv: Multi-year round-trip efficiency (fraction) of new storage resources by year in index_y, and zone in index_z. Column names are index_y, index_z, followed by the technolgies in index_stor_new (e.g., battery_1, battery_2, ...).\nStorRTENewIPPmy.csv: Multi-year round-trip efficiency (fraction) of new storage resources by year in index_y, IPP in index_p and zone in index_z. Column names are index_y, index_p, index_z, followed by the technolgies in index_stor_new (e.g., battery_1, battery_2, ...).\nStorRTEOldmy.csv: Round-trip efficiency (fraction) of existing storage resources by zone in index_z. Column names are index_z, followed by the technolgies in index_stor_existing (e.g., battery_1, battery_2, ... etc.).\nStorRTEOldIPPmy.csv: Multi-year round-trip efficiency (fraction) of exisiting storage resources by year in index_y, IPP in index_p and zone in index_z. Column names are index_y, index_p, index_z, followed by the technolgies in index_stor_existing (e.g., battery_1, battery_2, ...).\nNewStorDuration.csv: Duration in hours of new storage technologies. Column names are the new storage technology names in index_stor_new (e.g., battery_1, battery_2, ...).\nNewStorInitialEnergy.csv: Initial stored energy (Mwh) for new storage resources in index_stor_new by year in index_y, zone in index_z and day in index_d. Column names are index_y, index_stor, index_z, followed by the days in index_d (e.g., d001, d002, ...).\nNewStorInitialEnergyIPP.csv: Initial energy (MWh) for new storage resources in index_stor_new by year in index_y, IPP in index_p, zone in index_z and day in index_d. Column names are index_y, index_stor, index_p, index_z, followed by the days in index_d (e.g., d001, d002, ...).\nCapacityCredit_new.csv: Capacity credit (fraction) of new generation technologies by year in index_y and zone in index_z. Column names are index_y, index_z, followed by the existing technology names in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nCapacityCreditStor_new.csv: Capacity credit (fraction) of new storage technologies by year in index_y and zone in index_z. Column names are index_y, index_z, followed by the new storage technology names in index_stornew (e.g., `battery1, battery_2, ...`).\nCapacityCredit_old.csv: Capacity credit (fraction) of existing generation technologies by year in index_y and zone in index_z. Column names are index_y, index_z, followed by the existing technology names in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nCapacityCreditStor_old.csv: Capacity credit (fraction) of existing storage technologies by by year in index_y and zone in index_z. Column names are index_y, index_z, followed by the existing storage technology names in index_stor_existing  (e.g., battery_1, battery_2, ...).","category":"page"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"EmissionRateNewmy.csv: Multi-year emission rate (pounds per million Btu) by year in index_y, zone in index_z and new technology types. Column names are index_y, index_z, followed by technolgies in index_k_new (e.g., gas-ct, gas-cc, upv, ...).\nEmissionRateNewIPPmy.csv: Multi-year emission rate (pounds per million Btu) by year in index_y, IPP in index_p, zone in index_z and new technology types. Column names are index_y, index_p, index_z, followed by technolgies in index_k_new (e.g., gas-ct, gas-cc, upv, ...).","category":"page"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"EmissionRateOldmy.csv: Multi-year emission rate (pounds per million Btu) by year in index_y, zone in index_z and new technology types. Column names are index_y, index_z, followed by technolgies in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).\nEmissionRateOldIPPmy.csv: Multi-year emission rate (pounds per million Btu) by year in index_y, IPP in index_p, zone in index_z and new technology types. Column names are index_y, index_p, index_z, followed by technolgies in index_k_existing (e.g., gas-ct, gas-cc, upv, ...).","category":"page"},{"location":"dev_guide/inputs/#Technology-Performance-for-Customers-(CustomerGroup)","page":"Inputs","title":"Technology Performance for Customers (CustomerGroup)","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"rte_dist_stor.csv: Distributed storage round trip efficiency (fraction) for a customer type in index_h and a zone in index_z. Column names are index_z, followed by the customer type values in index_h (e.g., Commercial, Residential, Industrial).\nduration_dist_stor.csv: Distributed storage duration (hours) for a customer type in index_h and a zone in index_z. Column names are index_z, followed by the customer type values in index_h (e.g., Commercial, Residential, Industrial).\nOptimalDER.csv: Optimal DER capacity (MWh) of the BTM technologies for each each zone in index_z and customer group in index_h. Column names are index_z, index_h, folowed by the technology names in index_m (e.g., BTMPV, BTMStorage).\nOptimalDERmy.csv: Multi-year optimal DER capacity (MWh) of the BTM technologies for each year in index_y, zone in index_z and customer group in index_h. Column names are index_y, index_z, index_h, folowed by the technology names in index_m (e.g., BTMPV, BTMStorage).\ninitial_energy_dist_stor.csv: Initial ditributed storage energy (MWh) for each zone in index_z, customer group in index_h and day in index_d. Column names are index_z, index_h, followed by days in index_d (e.g., d001, d002, ...).","category":"page"},{"location":"dev_guide/inputs/#Technology-Adoption-Parameters-(CustomerGroup)","page":"Inputs","title":"Technology Adoption Parameters (CustomerGroup)","text":"","category":"section"},{"location":"dev_guide/inputs/","page":"Inputs","title":"Inputs","text":"Bass_P.csv: Coefficient of innovation (p) values for the Bass diffusion model (used to construct the PV adoption model) for each cutomer type in index_h, zone in index_z and BTM technology combination. Column names are index_z, index_h, followed by the values in index_m (e.g., BTMPV, BTMStorage).\nBass_Q.csv: Coefficient of imitation (q) values for the Bass diffusion model (used to construct the PV adoption model) for each cutomer type in index_h, zone in index_z and BTM technology combination. Column names are index_z, index_h, followed by the values in index_m (e.g., BTMPV, BTMStorage).\nWTP.csv: Wllingness to pay ($/MW) for each year in index_y. Column names are the years in index_y (e.g., 2021, 2022).","category":"page"}]
}
